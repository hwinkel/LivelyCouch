
LivelyCouch is all about HTTP-Events


Imagine you have an application that allows the user to receive messages. These messages are stored in an "inbox" database in CouchDB. Every time the user receives a message we want to notify him with an email.
So we basically need two things for this scenario - a database changes listener that informs us on new messages and some code to send an e-mail.
LivelyCouch gives you both in the form of Workers. There is a changelistener Worker that can be configured to listen to CouchDB's _changes feed and emits event when something happens.
In addition we have an e-mail Worker for you that can be triggered by certain events.

So all we need to do to get our scenario working, is to subscribe these two Workers to the correct Events.

Lets first configure the changelistener subscription:
You need to create a new file in the "events-source" directory under LivelyCouch - say we name it "inbox_listener.json".
The content looks like this:

events-source/inbox_listener.json
{
  "trigger": [{
    "path": "/lively_events/lively_events_started",
  }],
  "workers": [{
    "name": "changelistener",
    "parameters": {
      "listenerid": "inbox_listener",
      "db": "inbox"
    }
  }]
}

This subscription basically says that on the event "/lively_events/lively_events_started" (which is emitted once during LivelyCouch startup) we want to trigger the changelistener Worker with some parameters.
The changelistener Worker can listen to multiple databases so we need to give our listener a "listenerid".
"db" tells the Worker the database it should listen to.
Every time a document changes the Worker emits the HTTP event "/changelistener/document_changed" along with the document id and listener id.
This means we can create a new subscription on this event:

events-source/message_arrived.json
{
  "trigger": [{
    "path": "/changelistener/document_changed",
    "parameters": {
      "listenerid": "inbox_listener"
    }
  }],
  "workers": [{
    "name": "email"
    "parameters": {
      "from": "mail@livelycouch.org",
      "to": "some_user_mail",
      "subject": "you've got mail!",
      "body": "We've got a message for you in CouchDB!"
    }
  }]
}

This subscription binds on any Event of "/changelistener/document_changed" but only if its "listenerid" parameter matches "inbox_listener".
We then simply pass all necessary parameters to the email Worker, just as we did with the changelistener before.
Thats all you have to do! Isn't it awesome - we didn't have to write a single line of code to get this working. Its just wiring of the two Workers with the right event subscriptions.
Every time you edit your subscription code on disk, LivelyCouch automatically pulls the changes as JSON documents into the "events" database from where it actually gets all subscriptions on runtime.
So when you replicate the events database to a second Couch that has LivelyCouch installed it will have the same functionality.

LivelyCouch has a few more Workers ready to use for common tasks in Couch applications e.g.
- a Timer that periodically emits events
- a filesystem watcher
- a Worker to load files as attachments to CouchDB
- a replication Worker that allows you to define CouchDB replication tasks

In the next tutorial we will explain how to write your own simple Workers to be able to build more complex solutions.